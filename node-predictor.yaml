AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Provisions infrastructure for the Node Demand Predictor
Parameters:
    BucketName:
        Type: String
        Description: Enter the name of the bucket to create, must be unique
Resources:
    BucketJsonDatasource:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref BucketName
            VersioningConfiguration:
                Status: Enabled
            NotificationConfiguration:
                LambdaConfigurations:
                    -
                        Event: s3:ObjectCreated:*
                        Function: !GetAtt [LambdaCreateDatasource, Arn]
    BucketPolicyJsonDatasource:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref BucketJsonDatasource
        PolicyDocument:
            Statement:
                -
                    Action:
                        - "s3:GetObject"
                    Effect: "Allow"
                    Resource:
                        - Fn::Join: [ "", [ !GetAtt [BucketJsonDatasource, Arn], "/*" ] ]
                    Principal:
                        Service: machinelearning.amazonaws.com
                -
                    Action:
                        - "s3:ListBucket"
                    Effect: "Allow"
                    Resource:
                        !GetAtt [BucketJsonDatasource, Arn]
                    Principal:
                        Service: machinelearning.amazonaws.com
    LambdaCreateDatasource:
        Type: AWS::Lambda::Function
        Properties:
            Handler: handler.handler
            MemorySize: 128
            Role: !GetAtt [IamRoleLambdaCreateDatasource, Arn]
            Runtime: python2.7
            Timeout: 60
            Code: ./functions/create-datasource
            Environment:
                Variables:
                    LAMBDA_DATASOURCE_POLLER_ARN: !GetAtt [LambdaDatasourcePoller, Arn]
    IamRoleLambdaCreateDatasource:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    IamPolicyLambdaCreateDatasourceRole1:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: read-from-s3
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                        Resource:
                            - Fn::Join: [ "", [ !GetAtt [BucketJsonDatasource, Arn], "/*" ] ]
            Roles:
                - !Ref IamRoleLambdaCreateDatasource
    IamPolicyLambdaCreateDatasourceRole2:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: create-ml-artifacts
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - machinelearning:CreateDataSourceFromS3
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:machinelearning", !Ref "AWS::Region", !Ref "AWS::AccountId", "datasource/*" ] ]
            Roles:
                - !Ref IamRoleLambdaCreateDatasource
    IamPolicyLambdaCreateDatasourceRole3:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: cloudwatch-events-access
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - events:PutRule
                            - events:PutTargets
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:events", !Ref "AWS::Region", !Ref "AWS::AccountId", "rule/*" ] ]
            Roles:
                - !Ref IamRoleLambdaCreateDatasource
    BucketJsonDatasourceLambdaInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaCreateDatasource
            Action: lambda:InvokeFunction
            Principal: s3.amazonaws.com
            SourceAccount: !Ref AWS::AccountId
    LambdaDatasourcePoller:
        Type: AWS::Lambda::Function
        Properties:
            Handler: handler.handler
            MemorySize: 128
            Role: !GetAtt [IamRoleLambdaDatasourcePoller, Arn]
            Runtime: python2.7
            Timeout: 60
            Code: ./functions/datasource-poller
            Environment:
                Variables:
                    LAMBDA_MODEL_POLLER_ARN: !GetAtt [LambdaModelPoller, Arn]
    IamRoleLambdaDatasourcePoller:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    IamPolicyLambdaDatasourcePollerRole1:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: create-ml-artifacts
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - machinelearning:CreateMLModel
                            - machinelearning:GetDataSource
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:machinelearning", !Ref "AWS::Region", !Ref "AWS::AccountId", "*" ] ]
            Roles:
                - !Ref IamRoleLambdaDatasourcePoller
    IamPolicyLambdaDatasourcePollerRole2:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: cloudwatch-events-access
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - events:PutRule
                            - events:PutTargets
                            - events:DeleteRule
                            - events:RemoveTargets
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:events", !Ref "AWS::Region", !Ref "AWS::AccountId", "rule/*" ] ]
            Roles:
                - !Ref IamRoleLambdaDatasourcePoller
    IamPolicyLambdaDatasourcePollerRole3:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: s3-access
            PolicyDocument:
                Statement:
                    -
                        Action:
                            - "s3:GetObject"
                        Effect: "Allow"
                        Resource:
                            - Fn::Join: [ "", [ !GetAtt [BucketJsonDatasource, Arn], "/*" ] ]
                    -
                        Action:
                            - "s3:ListBucket"
                        Effect: "Allow"
                        Resource:
                            !GetAtt [BucketJsonDatasource, Arn]
            Roles:
                - !Ref IamRoleLambdaDatasourcePoller
    CloudwatcheventsLambdaDatasourcePollerInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaDatasourcePoller
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !Join [ ":", [ "arn:aws:events", !Ref "AWS::Region", !Ref "AWS::AccountId", "rule/*" ] ]
    LambdaModelPoller:
        Type: AWS::Lambda::Function
        Properties:
            Handler: handler.handler
            MemorySize: 128
            Role: !GetAtt [IamRoleLambdaModelPoller, Arn]
            Runtime: python2.7
            Timeout: 60
            Code: ./functions/model-poller
    IamRoleLambdaModelPoller:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    IamPolicyLambdaModelPollerRole1:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: create-ml-artifacts
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - machinelearning:CreateRealtimeEndpoint
                            - machinelearning:GetMLModel
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:machinelearning", !Ref "AWS::Region", !Ref "AWS::AccountId", "*" ] ]
            Roles:
                - !Ref IamRoleLambdaModelPoller
    IamPolicyLambdaModelPollerRole2:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: cloudwatch-events-access
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - events:PutRule
                            - events:PutTargets
                            - events:DeleteRule
                            - events:RemoveTargets
                        Resource:
                            - Fn::Join: [ ":", [ "arn:aws:events", !Ref "AWS::Region", !Ref "AWS::AccountId", "rule/*" ] ]
            Roles:
                - !Ref IamRoleLambdaModelPoller
    CloudwatcheventsLambdaModelPollerInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaModelPoller
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !Join [ ":", [ "arn:aws:events", !Ref "AWS::Region", !Ref "AWS::AccountId", "rule/*" ] ]
Outputs:
    OutputBucketName:
        Value: !Ref BucketJsonDatasource
